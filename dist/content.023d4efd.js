(()=>{let t=/[a-zA-Z]{2}\d{2}:\d{2}(?=$)/,e=(t,e)=>{let[l,i]=t.split(":").map(t=>parseInt(t,10)),d=[];return d.push(n(l,i,e)),l<12&&d.push(n(24-l,i,e)),d};function n(t,e,n){let l=new Date;return l.setHours(t),l.setMinutes(e),new Intl.DateTimeFormat("en-US",{timeZone:n,hour:"2-digit",minute:"2-digit"}).format(l)}function l(t,e){let n=Array.from(t).find(t=>e.textContent===t.textContent);return n&&n.children&&n.children.length?l(n.children,e):!!n&&n}function i(t){let e=t.children;return t&&e.length&&l(e,t)?l(e,t):t}let d=t=>{switch(t.tagName){case"INPUT":case"TEXTAREA":return!0;default:if("true"===t.contentEditable)return!0;return!1}},a=document.getElementsByTagName("body")||null,o=a&&a[0];o&&o.addEventListener("mouseup",function(){let n=document.activeElement,l=n.tagName;d(n)&&(function(t){let e=t.parentElement;if(e.style.position="relative",!Array.from(e.children).find(t=>"tl-content"===t.id)){let t=document.createElement("div");t.id="tl-content",t.style.position="relative",e.appendChild(t)}}(n),n.addEventListener("input",d=>{let a=("INPUT"==l&&"TEXTAREA"==l?d.target.value:d.target.textContent).split("$")[1];if(t.test(a)){let t=a.substring(2,7);(function(t,e,n,l){let d=t.parentElement,a=i(t),o=("INPUT"==a.tagName&&"TEXTAREA"==a.tagName?a.value:a.textContent,function(t,e,n){let l=document.activeElement,i=l?.parentElement,d=null,a=0,o=Array.from(i.children).find(t=>"tl-div"===t.id);o?d=o:((d=document.createElement("div")).style.position="absolute",d.style.visibility="hidden",d.style.top="0px",d.style.left="0px",d.style.height=getComputedStyle(n).height,d.style.width=getComputedStyle(n).width,d.style.padding=getComputedStyle(n).padding,d.style.fontSize=getComputedStyle(n).fontSize,d.style.fontFamily=getComputedStyle(n).fontFamily,d.style.lineHeight=getComputedStyle(n).lineHeight,d.id="tl-div");let r=document.createElement("span");r.textContent=e,r.id="tl-child-span",i.appendChild(d),"INPUT"==n.tagName||"TEXTAREA"==n.tagName?(a=n.value.indexOf(e),d.textContent=n.value.slice(0,a)):(a=n.textContent.indexOf(e),d.textContent=n.textContent.slice(0,a)),d.appendChild(r);let c=r.getBoundingClientRect();return c.left-=50,r.remove(),c}(0,l,a)),u=o.top-90,s=Array.from(d.children).find(t=>"tl-content"===t.id);s&&(s.innerHTML=`<div id="tl-content-child" style="top:${u}px; left:${o.left}px" class="tl-main">
    ${e.map(t=>`<div class="tl-child"><span>${n} </span>-> ${t}</div>`).join("")}
  </div>`,e.forEach((e,n)=>{let d=s.children[n];d&&d.addEventListener("click",()=>{(function(t,e,n){let l=i(n),d=l.tagName;"INPUT"==d||"TEXTAREA"==d?l.value=l.value.replace(`$${e}`,t):l.textContent=l.textContent.replace(`$${e}`,t),c(n)})(e,l,t)})}),r=!0)})(n,e(t,"Europe/London"),t,a)}else r&&c(n)}))},!1);var r=!1;function c(t){let e=Array.from(t.parentElement.children).find(t=>"tl-content"===t.id);e&&(e.children[0].remove(),r=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
