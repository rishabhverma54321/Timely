var e,_,n,t,o,l,r,u,i={},s=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,c=Array.isArray;function p(e,_){for(var n in _)e[n]=_[n];return e}function d(e){var _=e.parentNode;_&&_.removeChild(e)}function a(e,_,o,l,r){var u={type:e,props:_,key:o,ref:l,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:null==r?++t:r,__i:-1,__u:0};return null==r&&null!=n.vnode&&n.vnode(u),u}function h(e){return e.children}function v(e,_){this.props=e,this.context=_}function y(e,_){if(null==_)return e.__?y(e.__,e.__i+1):null;for(var n;_<e.__k.length;_++)if(null!=(n=e.__k[_])&&null!=n.__e)return n.__e;return"function"==typeof e.type?y(e):null}function m(e){(!e.__d&&(e.__d=!0)&&o.push(e)&&!g.__r++||l!==n.debounceRendering)&&((l=n.debounceRendering)||r)(g)}function g(){var e,_,t,l,r,i,s,f,c;for(o.sort(u);e=o.shift();)e.__d&&(_=o.length,l=void 0,i=(r=(t=e).__v).__e,f=[],c=[],(s=t.__P)&&((l=p({},r)).__v=r.__v+1,n.vnode&&n.vnode(l),x(s,l,r,t.__n,void 0!==s.ownerSVGElement,32&r.__u?[i]:null,f,null==i?y(r):i,!!(32&r.__u),c),l.__v=r.__v,l.__.__k[l.__i]=l,C(f,l,c),l.__e!=i&&function e(_){var n,t;if(null!=(_=_.__)&&null!=_.__c){for(_.__e=_.__c.base=null,n=0;n<_.__k.length;n++)if(null!=(t=_.__k[n])&&null!=t.__e){_.__e=_.__c.base=t.__e;break}return e(_)}}(l)),o.length>_&&o.sort(u));g.__r=0}function b(e,_,n,t,o,l,r,u,f,p,d){var v,m,g,b,k,w=t&&t.__k||s,S=_.length;for(n.__d=f,function(e,_,n){var t,o,l,r,u,i=_.length,s=n.length,f=s,p=0;for(e.__k=[],t=0;t<i;t++)r=t+p,null!=(o=e.__k[t]=null==(o=_[t])||"boolean"==typeof o||"function"==typeof o?null:"string"==typeof o||"number"==typeof o||"bigint"==typeof o||o.constructor==String?a(null,o,null,null,null):c(o)?a(h,{children:o},null,null,null):void 0===o.constructor&&o.__b>0?a(o.type,o.props,o.key,o.ref?o.ref:null,o.__v):o)?(o.__=e,o.__b=e.__b+1,u=function(e,_,n,t){var o=e.key,l=e.type,r=n-1,u=n+1,i=_[n];if(null===i||i&&o==i.key&&l===i.type&&0==(131072&i.__u))return n;if(t>(null!=i&&0==(131072&i.__u)?1:0))for(;r>=0||u<_.length;){if(r>=0){if((i=_[r])&&0==(131072&i.__u)&&o==i.key&&l===i.type)return r;r--}if(u<_.length){if((i=_[u])&&0==(131072&i.__u)&&o==i.key&&l===i.type)return u;u++}}return -1}(o,n,r,f),o.__i=u,l=null,-1!==u&&(f--,(l=n[u])&&(l.__u|=131072)),null==l||null===l.__v?(-1==u&&p--,"function"!=typeof o.type&&(o.__u|=65536)):u!==r&&(u===r+1?p++:u>r?f>i-r?p+=u-r:p--:u<r?u==r-1&&(p=u-r):p=0,u!==t+p&&(o.__u|=65536))):(l=n[r])&&null==l.key&&l.__e&&0==(131072&l.__u)&&(l.__e==e.__d&&(e.__d=y(l)),E(l,l,!1),n[r]=null,f--);if(f)for(t=0;t<s;t++)null!=(l=n[t])&&0==(131072&l.__u)&&(l.__e==e.__d&&(e.__d=y(l)),E(l,l))}(n,_,w),f=n.__d,v=0;v<S;v++)null!=(g=n.__k[v])&&"boolean"!=typeof g&&"function"!=typeof g&&(m=-1===g.__i?i:w[g.__i]||i,g.__i=v,x(e,g,m,o,l,r,u,f,p,d),b=g.__e,g.ref&&m.ref!=g.ref&&(m.ref&&D(m.ref,null,g),d.push(g.ref,g.__c||b,g)),null==k&&null!=b&&(k=b),65536&g.__u||m.__k===g.__k?(b||m.__e!=f||(f=y(m)),f=function e(_,n,t){var o,l;if("function"==typeof _.type){for(o=_.__k,l=0;o&&l<o.length;l++)o[l]&&(o[l].__=_,n=e(o[l],n,t));return n}_.__e!=n&&(t.insertBefore(_.__e,n||null),n=_.__e);do n=n&&n.nextSibling;while(null!=n&&8===n.nodeType)return n}(g,f,e)):"function"==typeof g.type&&void 0!==g.__d?f=g.__d:b&&(f=b.nextSibling),g.__d=void 0,g.__u&=-196609);n.__d=f,n.__e=k}function k(e,_,n){"-"===_[0]?e.setProperty(_,null==n?"":n):e[_]=null==n?"":"number"!=typeof n||f.test(_)?n:n+"px"}function w(e,_,n,t,o){var l;e:if("style"===_){if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof t&&(e.style.cssText=t=""),t)for(_ in t)n&&_ in n||k(e.style,_,"");if(n)for(_ in n)t&&n[_]===t[_]||k(e.style,_,n[_])}}else if("o"===_[0]&&"n"===_[1])l=_!==(_=_.replace(/(PointerCapture)$|Capture$/i,"$1")),_=_.toLowerCase() in e||"onFocusOut"===_||"onFocusIn"===_?_.toLowerCase().slice(2):_.slice(2),e.l||(e.l={}),e.l[_+l]=n,n?t?n.u=t.u:(n.u=Date.now(),e.addEventListener(_,l?P:S,l)):e.removeEventListener(_,l?P:S,l);else{if(o)_=_.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==_&&"height"!==_&&"href"!==_&&"list"!==_&&"form"!==_&&"tabIndex"!==_&&"download"!==_&&"rowSpan"!==_&&"colSpan"!==_&&"role"!==_&&_ in e)try{e[_]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&"-"!==_[4]?e.removeAttribute(_):e.setAttribute(_,n))}}function S(e){if(this.l){var _=this.l[e.type+!1];if(e.t){if(e.t<=_.u)return}else e.t=Date.now();return _(n.event?n.event(e):e)}}function P(e){if(this.l)return this.l[e.type+!0](n.event?n.event(e):e)}function x(e,t,o,l,r,u,s,f,a,m){var g,k,S,P,x,C,D,E,L,M,U,W,F,N,H,A=t.type;if(void 0!==t.constructor)return null;128&o.__u&&(a=!!(32&o.__u),u=[f=t.__e=o.__e]),(g=n.__b)&&g(t);e:if("function"==typeof A)try{if(E=t.props,L=(g=A.contextType)&&l[g.__c],M=g?L?L.props.value:g.__:l,o.__c?D=(k=t.__c=o.__c).__=k.__E:("prototype"in A&&A.prototype.render?t.__c=k=new A(E,M):(t.__c=k=new v(E,M),k.constructor=A,k.render=T),L&&L.sub(k),k.props=E,k.state||(k.state={}),k.context=M,k.__n=l,S=k.__d=!0,k.__h=[],k._sb=[]),null==k.__s&&(k.__s=k.state),null!=A.getDerivedStateFromProps&&(k.__s==k.state&&(k.__s=p({},k.__s)),p(k.__s,A.getDerivedStateFromProps(E,k.__s))),P=k.props,x=k.state,k.__v=t,S)null==A.getDerivedStateFromProps&&null!=k.componentWillMount&&k.componentWillMount(),null!=k.componentDidMount&&k.__h.push(k.componentDidMount);else{if(null==A.getDerivedStateFromProps&&E!==P&&null!=k.componentWillReceiveProps&&k.componentWillReceiveProps(E,M),!k.__e&&(null!=k.shouldComponentUpdate&&!1===k.shouldComponentUpdate(E,k.__s,M)||t.__v===o.__v)){for(t.__v!==o.__v&&(k.props=E,k.state=k.__s,k.__d=!1),t.__e=o.__e,t.__k=o.__k,t.__k.forEach(function(e){e&&(e.__=t)}),U=0;U<k._sb.length;U++)k.__h.push(k._sb[U]);k._sb=[],k.__h.length&&s.push(k);break e}null!=k.componentWillUpdate&&k.componentWillUpdate(E,k.__s,M),null!=k.componentDidUpdate&&k.__h.push(function(){k.componentDidUpdate(P,x,C)})}if(k.context=M,k.props=E,k.__P=e,k.__e=!1,W=n.__r,F=0,"prototype"in A&&A.prototype.render){for(k.state=k.__s,k.__d=!1,W&&W(t),g=k.render(k.props,k.state,k.context),N=0;N<k._sb.length;N++)k.__h.push(k._sb[N]);k._sb=[]}else do k.__d=!1,W&&W(t),g=k.render(k.props,k.state,k.context),k.state=k.__s;while(k.__d&&++F<25)k.state=k.__s,null!=k.getChildContext&&(l=p(p({},l),k.getChildContext())),S||null==k.getSnapshotBeforeUpdate||(C=k.getSnapshotBeforeUpdate(P,x)),b(e,c(H=null!=g&&g.type===h&&null==g.key?g.props.children:g)?H:[H],t,o,l,r,u,s,f,a,m),k.base=t.__e,t.__u&=-161,k.__h.length&&s.push(k),D&&(k.__E=k.__=null)}catch(e){t.__v=null,a||null!=u?(t.__e=f,t.__u|=a?160:32,u[u.indexOf(f)]=null):(t.__e=o.__e,t.__k=o.__k),n.__e(e,t,o)}else null==u&&t.__v===o.__v?(t.__k=o.__k,t.__e=o.__e):t.__e=function(e,n,t,o,l,r,u,s,f){var p,a,h,v,m,g,k,S=t.props,P=n.props,x=n.type;if("svg"===x&&(l=!0),null!=r){for(p=0;p<r.length;p++)if((m=r[p])&&"setAttribute"in m==!!x&&(x?m.localName===x:3===m.nodeType)){e=m,r[p]=null;break}}if(null==e){if(null===x)return document.createTextNode(P);e=l?document.createElementNS("http://www.w3.org/2000/svg",x):document.createElement(x,P.is&&P),r=null,s=!1}if(null===x)S===P||s&&e.data===P||(e.data=P);else{if(r=r&&_.call(e.childNodes),S=t.props||i,!s&&null!=r)for(S={},p=0;p<e.attributes.length;p++)S[(m=e.attributes[p]).name]=m.value;for(p in S)m=S[p],"children"==p||("dangerouslySetInnerHTML"==p?h=m:"key"===p||p in P||w(e,p,null,m,l));for(p in P)m=P[p],"children"==p?v=m:"dangerouslySetInnerHTML"==p?a=m:"value"==p?g=m:"checked"==p?k=m:"key"===p||s&&"function"!=typeof m||S[p]===m||w(e,p,m,S[p],l);if(a)s||h&&(a.__html===h.__html||a.__html===e.innerHTML)||(e.innerHTML=a.__html),n.__k=[];else if(h&&(e.innerHTML=""),b(e,c(v)?v:[v],n,t,o,l&&"foreignObject"!==x,r,u,r?r[0]:t.__k&&y(t,0),s,f),null!=r)for(p=r.length;p--;)null!=r[p]&&d(r[p]);s||(p="value",void 0===g||g===e[p]&&("progress"!==x||g)&&("option"!==x||g===S[p])||w(e,p,g,S[p],!1),p="checked",void 0!==k&&k!==e[p]&&w(e,p,k,S[p],!1))}return e}(o.__e,t,o,l,r,u,s,a,m);(g=n.diffed)&&g(t)}function C(e,_,t){_.__d=void 0;for(var o=0;o<t.length;o++)D(t[o],t[++o],t[++o]);n.__c&&n.__c(_,e),e.some(function(_){try{e=_.__h,_.__h=[],e.some(function(e){e.call(_)})}catch(e){n.__e(e,_.__v)}})}function D(e,_,t){try{"function"==typeof e?e(_):e.current=_}catch(e){n.__e(e,t)}}function E(e,_,t){var o,l;if(n.unmount&&n.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||D(o,null,_)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){n.__e(e,_)}o.base=o.__P=null,e.__c=void 0}if(o=e.__k)for(l=0;l<o.length;l++)o[l]&&E(o[l],_,t||"function"!=typeof e.type);t||null==e.__e||d(e.__e),e.__=e.__e=e.__d=void 0}function T(e,_,n){return this.constructor(e,n)}_=s.slice,n={__e:function(e,_,n,t){for(var o,l,r;_=_.__;)if((o=_.__c)&&!o.__)try{if((l=o.constructor)&&null!=l.getDerivedStateFromError&&(o.setState(l.getDerivedStateFromError(e)),r=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,t||{}),r=o.__d),r)return o.__E=o}catch(_){e=_}throw e}},t=0,v.prototype.setState=function(e,_){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=p({},this.state),"function"==typeof e&&(e=e(p({},n),this.props)),e&&p(n,e),null!=e&&this.__v&&(_&&this._sb.push(_),m(this))},v.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),m(this))},v.prototype.render=h,o=[],r="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,u=function(e,_){return e.__v.__b-_.__v.__b},g.__r=0;var L=0;function M(e,_,t,o,l,r){var u,i,s={};for(i in _)"ref"==i?u=_[i]:s[i]=_[i];var f={type:e,props:s,key:t,ref:u,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:--L,__i:-1,__u:0,__source:l,__self:r};if("function"==typeof e&&(u=e.defaultProps))for(i in u)void 0===s[i]&&(s[i]=u[i]);return n.vnode&&n.vnode(f),f}var U={};Object.defineProperty(U,"popup",{get:()=>e,set:_=>e=_,enumerable:!0,configurable:!0}),e="v4_y0W_popup";var W=()=>M("div",{className:(U&&U.__esModule?U.default:U).popup,children:"Hello preact"});document.addEventListener("DOMContentLoaded",()=>{var e,t,o,l,r,u;e=M(W,{}),t=document.body,n.__&&n.__(e,t),l=o&&o.__k||t.__k,r=[],u=[],x(t,e=(o||t).__k=function(e,n,t){var o,l,r,u={};for(r in n)"key"==r?o=n[r]:"ref"==r?l=n[r]:u[r]=n[r];if(arguments.length>2&&(u.children=arguments.length>3?_.call(arguments,2):t),"function"==typeof e&&null!=e.defaultProps)for(r in e.defaultProps)void 0===u[r]&&(u[r]=e.defaultProps[r]);return a(e,u,o,l,null)}(h,null,[e]),l||i,i,void 0!==t.ownerSVGElement,o?[o]:l?null:t.firstChild?_.call(t.childNodes):null,r,o||(l?l.__e:t.firstChild),!1,u),C(r,e,u)});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
